import Head from "next/head";
import { useState } from "react";
import ControlledTreeView from "../components/myTree";
import RenderTree from "../models/RenderTree";
import styles from "../styles/Home.module.css";
import AddCircleIcon from '@mui/icons-material/AddCircle';
import data from "../components/db.json"

console.log('data', data)

export default function Home() {
  const [dataa, setDataa] = useState<RenderTree[]>([
    {
      id: "root",
      name: "Parent",
      children: [
        {
          id: "1",
          name: "Child - 1",
        },
        {
          id: "3",
          name: "Child - 3",
          children: [
            {
              id: "4",
              name: "Child - 4",
            },
          ],
        },
      ],
    },
  ]);

  const[value,setValue]=useState<string>("")
  // const[addNode,setAddNode]=useState<string>("")


  const handleDelete = (nodeId: string) => {
    let d = dataa;
    const res = deleteItem(d, nodeId);
    setDataa([...res.nodes]);
  };

  function deleteItem(nodes: RenderTree[], id: string) {
    let deleted = false;
    for (let index = 0; index < nodes.length; index++) {
      if (nodes[index].id == id) {
        nodes.splice(index, 1);
        deleted = true;
        break;
      }

      if (nodes[index].children) {
        const res = deleteItem(nodes[index].children ?? [], id);
        if (res.deleted) {
          nodes[index].children = res.nodes;
          deleted = true;
          break;
        }
      }
    }
    return { nodes, deleted };
  }

  ///edited

  const editTreeVIew=(nodeId: string)=>{
    let d = dataa;
    const res = editItem(d, nodeId);
    setDataa([...res.nodes]);
  }

  const editItem=(nodes: RenderTree[], id: string)=>{
    let edited = false;
    for (let index = 0; index < nodes.length; index++) {
      if (nodes[index].id == id) {
        const updatedProjects = [
           id,
           nodes[index].name=value
        ];
        console.log('updatedProjects', updatedProjects)
        edited = true;
        break;
      }

      if (nodes[index].children) {
        const res = editItem(nodes[index].children ?? [], id);
        if (res.edited) {
          nodes[index].children = res.nodes;
          edited = true;
          break;
        }
      }
    }
    return { nodes, edited };
  }
  /////

// const addHandler=(nodes: RenderTree[],nodeId:string ,id:string):void=>{
//  setDataa([...dataa,{id:nodeId,name:addNode}])
// }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <input value={value} onChange={(e)=>setValue(e.target.value)} />
        <p>{data.name}</p>
        <ControlledTreeView dataa={dataa} deleteItem={handleDelete} editTreeVIew={editTreeVIew} value={value} setDataa={setDataa}/>
        {/* <div >
        <input value={addNode} onChange={(e)=>setAddNode(e.target.value)} type="text"/>
        <button onClick={addHandler}> <AddCircleIcon/></button>
    </div> */}
      </main>
    </div>
  );
}
